name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev-all]"
    
    - name: Lint with ruff
      run: |
        ruff check creso/
    
    - name: Format check with black
      run: |
        black --check creso/
    
    - name: Type check with mypy (advisory only)
      run: |
        mypy creso/ || echo "Type checking has issues but continuing CI"
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=creso --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,graph,cli]"
    
    - name: Run performance benchmarks
      run: |
        python examples/train_tabular.py
        python examples/train_timeseries.py
    
    - name: Check example outputs
      run: |
        ls -la . | grep -E '\.pkl$|\.png$|\.ts$' || echo "No output files found"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
        pip install "safety>=3.0.0" || pip install "safety==2.3.5" || echo "Safety installation failed, skipping dependency check"

    - name: Security check with bandit (advisory only)
      run: |
        bandit -r creso/ -f json -o bandit-report.json || true
        bandit -r creso/ --severity-level medium || echo "Security warnings found (model loading risks are expected)"

    - name: Check dependencies with safety (optional)
      run: |
        if command -v safety >/dev/null 2>&1; then
          # Test if safety is working properly first
          if safety --version >/dev/null 2>&1; then
            safety check --json --output safety-report.json || echo "Safety dependency check failed"
            safety check || echo "Known dependency issues (advisory)"
          else
            echo "Safety is installed but not working properly (likely typer compatibility issue)"
            echo "Skipping safety dependency vulnerability check"
          fi
        else
          echo "Safety not available, skipping dependency vulnerability check"
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Test install from wheel
      run: |
        pip install dist/*.whl
        python -c "import creso; print(f'CReSO v{creso.__version__} installed successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1